name: pkg

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch: 

jobs:
  build_x64_executables:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pkg_target_without_node:
          - mac-x64
          - win-x64
          - linuxstatic-x64
          - linux-x64
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3.1.1
        with:
          node-version: '14'
      - run: npm ci
      - run: |
          set -xeu
          npm run build
          ./node_modules/.bin/pkg --out-path=hosts-server-pkg-${{ matrix.pkg_target_without_node }} --targets=node16-${{ matrix.pkg_target_without_node }} .
      - name: tar.gz or zip
        run: |
          set -xeu
          if [ "${{ matrix.pkg_target_without_node }}" = "win-x64" ]; then
            zip -r hosts-server-pkg-${{ matrix.pkg_target_without_node }}.zip ./hosts-server-pkg-${{ matrix.pkg_target_without_node }}
          else
            tar czvf hosts-server-pkg-${{ matrix.pkg_target_without_node }}.tar.gz ./hosts-server-pkg-${{ matrix.pkg_target_without_node }}
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: build_x64-${{ matrix.pkg_target_without_node }}  # 唯一构件名称
          path: |
            hosts-server-pkg-${{ matrix.pkg_target_without_node }}.*
          if-no-files-found: error  # 确保文件存在

  build_arm_executables:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pkg_target_without_node:
          - mac-arm64
          - win-arm64
          - linuxstatic-arm64
          - linuxstatic-armv7
          - linux-arm64
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - run: |
          set -xeu
          docker run --rm -i -v $PWD:/app --platform=linux/arm64/v8 node:14 bash << 'EOF'
          set -xeu
          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus2/ldid_linux_aarch64
          chmod +x ldid_linux_aarch64
          mv ./ldid_linux_aarch64 /usr/local/bin/ldid
          cd /app
          npm ci
          npm run build
          ./node_modules/.bin/pkg --out-path=hosts-server-pkg-${{ matrix.pkg_target_without_node }} --targets=node16-${{ matrix.pkg_target_without_node }} .
          EOF
      - name: tar.gz or zip
        run: |
          set -xeu
          if [ "${{ matrix.pkg_target_without_node }}" = "win-arm64" ]; then
            zip -r hosts-server-pkg-${{ matrix.pkg_target_without_node }}.zip ./hosts-server-pkg-${{ matrix.pkg_target_without_node }}
          else
            tar czvf hosts-server-pkg-${{ matrix.pkg_target_without_node }}.tar.gz ./hosts-server-pkg-${{ matrix.pkg_target_without_node }}
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: build_arm-${{ matrix.pkg_target_without_node }}  # 唯一构件名称
          path: |
            hosts-server-pkg-${{ matrix.pkg_target_without_node }}.*
          if-no-files-found: error

  # 测试作业需要适配新构件名称
  macos_operational_test:
    runs-on: macos-latest
    needs: build_x64_executables
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build_x64-mac-x64
          path: .
      - name: Unarchive tar.gz
        run: tar xvf hosts-server-pkg-mac-x64.tar.gz
      - name: Operational test
        run: |
          set -xeu
          ./hosts-server-pkg-mac-x64/hosts-server --port=8080 &> ./hosts-server.log &
          server_pid=$!
          sleep 10
          curl localhost:8080 > /tmp/hosts.txt
          cat /tmp/hosts.txt
          cat ./hosts-server.log
          kill $server_pid

  windows_operational_test:
    runs-on: windows-latest
    needs: build_x64_executables
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build_x64-win-x64
          path: .
      - name: Unarchive zip
        run: unzip hosts-server-pkg-win-x64.zip
      - name: Operational test
        run: |
          $args = @("--port=8080")
          $server_pid = Start-Process -PassThru -FilePath .\hosts-server-pkg-win-x64\hosts-server.exe -ArgumentList $args | foreach { $_.Id }
          sleep 10
          curl localhost:8080 > C:\Temp\hosts.txt
          cat C:\Temp\hosts.txt
          kill $server_pid

  linux_operational_test:
    runs-on: ubuntu-latest
    needs: build_x64_executables
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build_x64-linuxstatic-x64
          path: .
      - name: Unarchive tar.gz
        run: tar xvf hosts-server-pkg-linuxstatic-x64.tar.gz
      - name: Operational test
        run: |
          set -xeu
          ./hosts-server-pkg-linuxstatic-x64/hosts-server --port=8080 &> ./hosts-server.log &
          server_pid=$!
          sleep 10
          curl localhost:8080 > /tmp/hosts.txt
          cat /tmp/hosts.txt
          cat ./hosts-server.log
          kill $server_pid

  release_executables:
    if: startsWith( github.ref, 'refs/tags/')
    needs:
      - macos_operational_test
      - windows_operational_test
      - linux_operational_test
      - build_arm_executables
    runs-on: ubuntu-latest
    steps:
      - name: Download x64 artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build_x64-*
          path: build_x64
          merge-multiple: true
      - name: Download arm artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build_arm-*
          path: build_arm
          merge-multiple: true
      - run: |
          set -xeu
          mkdir -p publish_dir
          mv build_x64/* build_arm/* publish_dir/ || true
          (cd publish_dir && sha256sum * | tee /dev/stderr > sha256sums.txt)
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: publish_dir/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
